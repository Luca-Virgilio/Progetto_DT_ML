x = c(2,3,4)
c
x
list(x)
list(list(x))
# librerie necessarie
if (!require("ggplot2"))
install.packages("ggplot2", dependencies = T)
if (!require("reshape2"))
install.packages("reshape2", dependencies = T)
if (!require("rattle"))
install.packages("rattle", dependencies = T)
if (!require("rpart.plot"))
install.packages("rpart.plot", dependencies = T)
if (!require("RColorBrewer"))
install.packages("RColorBrewer", dependencies = T)
if (!require("ROCR"))
install.packages("ROCR", dependencies = T)
if (!require("caret"))
install.packages("caret", dependencies = T)
library(ggplot2)
library(reshape2)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(caret)
setwd("~/Desktop/consegna/ProgettoML")
dataset = read.csv2(file = "./dataset/finale_int.csv", header = TRUE, sep = ",")
# png("dens_attesa.png")
# ggplot(dataset, aes(Attesa)) +
#       geom_density()
# dev.off()
#
# temp = sort(dataset$Attesa)
# perc = quantile(temp, probs = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.97, 0.99))
#rimuovo gli outlier. Valori oltre il 95 percentile
dataset = dataset[dataset$Attesa<quantile(dataset$Attesa, 0.95),] # perdo 4394 righe
# png("dens_attesa_dopo.png")
# ggplot(dataset, aes(Attesa)) +
#   geom_density()
# dev.off()
# discretizzo attesa
# <=10 --> 1
# 11-20 --> 2
# 21-30 --> 3
# >30 --> 4
dataset$Attesa[dataset$Attesa <= 10] = 1
dataset$Attesa[dataset$Attesa %in% c(11:20)] = 2
dataset$Attesa[dataset$Attesa %in% c(21:30)] = 3
dataset$Attesa[dataset$Attesa >30] = 4
########### poi da togliere##########
dataset = subset(dataset, select=-c(Efficienza_sportello,Efficienza_sportello_servizio))
dataset = subset(dataset, select=-c(Chiamato_alle_ore,Stato,Operatore_numero,Sportello,Ultima_operazione_alle,
Durata,Indice,media3,mediana3,L2t,L3t))
################ DECISION TREE ##############
set.seed(100)
trainIndex <- createDataPartition(dataset$Attesa, p = .7,
list = FALSE,
times = 1)
trainingset <- dataset[ trainIndex,]
test  <- dataset[-trainIndex,]
decisionTree_base = rpart(Attesa ~ ., data=trainingset, method="class",cp =0.001)
t_pred_base = predict(decisionTree_base, test, type="class")
set.seed(42)
#Randomly shuffle the data
data = dataset[sample(nrow(dataset)),]
#Create 10 equally size folds
folds = cut(seq(1, nrow(dataset)), breaks=10, labels=FALSE)
#Create accuracies array
accuracies = rep(0, 10)
precisions = rep(0, 10)
recalls = rep(0, 10)
fmeasures = rep(0, 10)
#Perform 10 fold cross validation
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes = which(folds == i, arr.ind = TRUE)
testData = dataset[testIndexes, ]
trainData = dataset[-testIndexes, ]
#now train the model with cp = the cp used for the pruned tree before
model_5r = rpart(Attesa ~ media5 + mediana5 + Servizio + Presente_alle_ore,
data=trainData, method="class", cp = 0.012)
#predict the models
pred = predict(model_5r, testData, type="class")
#check accuracy, precision, recall and fmeasure
cm = table(testData$Attesa, pred)
accuracy = sum(diag(cm))/sum(cm)
precision = diag(cm) / rowSums(cm)
recall = diag(cm) / colSums(cm)
fmeasure = 2 * precision * recall / (precision + recall)
#add accuracy, precision, recall and fmeasure to the relative list
accuracies[i] = accuracy
precisions[i] = precision
recalls[i] = recall
fmeasures[i] = fmeasure
}
#mean of accuracies, precisions, recalls and fmeasures
mean_accuracy = mean(accuracies)
mean_precision = mean(precisions)
mean_recalls = mean(recalls)
mean_fmeasure = mean(fmeasures)
temp = data.frame(fold = (1:10), accuracy = accuracies, precision  = precisions, recall = recalls, fmeasure = fmeasures)
xrange = range(temp$fold)
yrange = range(c(0:1))
plot(xrange, yrange, type="n", xlab="fold",
ylab="performance" )
colors <- rainbow(4)
linetype <- c(1:4)
plotchar <- c(1:4)
# add lines accuracy
lines(c(1:10), accuracies, type="b", lwd=1.5, lty=linetype[1], col=colors[1], pch=plotchar[1])
# add lines accuracy
lines(c(1:10), precisions, type="b", lwd=1.5, lty=linetype[2], col=colors[2], pch=plotchar[2])
# add lines accuracy
lines(c(1:10), recalls, type="b", lwd=1.5, lty=linetype[3], col=colors[3], pch=plotchar[3])
# add lines accuracy
lines(c(1:10), fmeasures, type="b", lwd=1.5, lty=linetype[4], col=colors[4], pch=plotchar[4])
grid(NULL, NULL, lty = 5)
legend("bottomright", col = colors, pch = plotchar, lwd = 1.5, lty = linetype,
legend = c(paste0("accuracy"),
paste0("precision"),
paste0("recall"),
paste0("fmeasure")),
title = "Performance")
# add a title and subtitle
title("Performance per 10-cross validation for DT3")
range(1,10)
range(c(1:10))
range(1:10)
